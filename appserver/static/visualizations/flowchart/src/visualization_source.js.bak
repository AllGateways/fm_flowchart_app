define([
    'jquery',
    'underscore',
    'splunkjs/mvc',
    'splunkjs/mvc/searchmanager',
    'api/SplunkVisualizationBase',
    'api/SplunkVisualizationUtils',
    'jointjs',
    'flowchart_utils'
    ], function(
        $,
        _,
        mvc,
	SearchManager,
        SplunkVisualizationBase,
        SplunkVisualizationUtils,
        jointjs,
        flowchart_utils
    ) {
        var graph;
        var paper;
        var stencilGraph;
        var stencilPaper;
        var edit_mode = 1;

        var search = new SearchManager({
             id: "flow_search",
             earliest_time: "-24h@h",
             latest_time: "now",
	     search: "|inputlookup flowchart_kv"
        });

        var update = new SearchManager({
             id: "flow_update",
             earliest_time: "-24h@h",
             latest_time: "now",
             search: ""
        });

        return SplunkVisualizationBase.extend({
            initialize: function() {
                this.$el = $(this.el);

                chart = document.createElement("div");
                chart.className = "splunk-flowchart";
                edit = document.createElement("div");
                edit.className = "splunk-flowchart-stencil";
                this.el.appendChild(edit);
                this.el.appendChild(chart);

	        panel_id = $('.dashboard-cell.dashboard-layout-panel').attr('id');
	        search_str = '|inputlookup flowchart_kv|eval k=_key|where k="' + panel_id + '"|table defs';
	        update.set({search:  search_str});
	        results = search.data('results');
	        graph = new jointjs.dia.Graph;
                paper = new jointjs.dia.Paper({
                   el: this.el.getElementsByClassName('splunk-flowchart'),
	           width: '100%',
                   defaultLink: new jointjs.shapes.flowchart.Link,
                   linkPinning: false,
                    model: graph
                });

                paper.options.defaultConnector = {
                    name: 'rounded',
                    args: {
                        radius: 10
                    }
                }

	        results.on("data", () => {
     		    if (results.hasData()) {
		        graph_str = results.data().rows[0][1];
		        graph.fromJSON(JSON.parse(graph_str));
            	    }
 	        });

		graph.on('add', function(link) {
                    if (link.attributes.type === 'flowchart.Link') {
                        link.appendLabel({
                            markup: [
                                {
                                    tagName: 'rect',
                                    selector: 'source_bg'
                                }, {
                                    tagName: 'text',
                                    selector: 'source_value'
                                }
                            ],
                            attrs: {
				source_bg: {
                                    opacity: 0.2,
                                    ref: 'source_value',
				    refWidth: 24,
                    		    refHeight: 8,
                                    refX: -12,
                                    refY: -4,
                                    rx: 8,
                                    ry: 8,
                                    fill: 'white',
				},
                                source_value: {
                                    text: '0000',
                                    fill: '#000000',
                                    fontSize: 10,
                                    textAnchor: 'middle',
                                    yAlignment: 'middle',
                                },
                            },
			    position: {
				distance: 25,
			    }
                        });
                        link.appendLabel({
                            markup: [
                                {
                                    tagName: 'rect',
                                    selector: 'target_bg'
                                }, {
                                    tagName: 'text',
                                    selector: 'target_value'
                                }
                            ],
                            attrs: {
                                target_bg: {
				    opacity: 0.2,
                                    border: 'solid black',
                                    ref: 'target_value',
                                    refWidth: 24,
                                    refHeight: 8,
                                    refX: -12,
                                    refY: -4,
                                    rx: 8,
                                    ry: 8,
                                    fill: 'white',
                                },
                                target_value: {
                                    text: '0000',
                                    fill: '#000000',
                                    fontSize: 10,
                                    textAnchor: 'middle',
                                    yAlignment: 'middle',
                                },
                            },
                            position: {
                                distance: -25,
                            }
                        });
                    }
                })

                paper.on('link:mouseenter', function(linkView) {
                    var verticesTool = new jointjs.linkTools.Vertices();
                    var segmentsTool = new jointjs.linkTools.Segments();
                    var sourceArrowheadTool = new jointjs.linkTools.SourceArrowhead();
                    var targetArrowheadTool = new jointjs.linkTools.TargetArrowhead();
                    var sourceAnchorTool = new jointjs.linkTools.SourceAnchor();
                    var targetAnchorTool = new jointjs.linkTools.TargetAnchor();
                    var boundaryTool = new jointjs.linkTools.Boundary();
                    var removeButton = new jointjs.linkTools.Remove();

                    tvs = new jointjs.dia.ToolsView({
                        tools: [
                            verticesTool, 
                            segmentsTool,
                            sourceArrowheadTool, 
                            targetArrowheadTool,
                            sourceAnchorTool, 
                            targetAnchorTool,
                            boundaryTool, 
                            removeButton
                        ]
                    })
                    linkView.addTools(tvs);
                    linkView.showTools();
                });

                paper.on('link:mouseleave', function(linkView) {
                    linkView.hideTools();
                    linkView.removeTools();
                });

                paper.on('element:mouseenter', function(elementView, evt, x, y) {
                    elementView.model.attr('border/fill', 'orange');
                });

                paper.on('element:mouseleave', function(elementView) {
                    elementView.model.attr('border/fill', '#42b9f4');
                });

	        paper.on('element:pointerdblclick', function(elemView, evt, x, y) { 
        	    var label = prompt('Update label');
		    elemView.model.attr('text/text', label);
		    elemView.model.attributes.id = label;
		    id = elemView.model.id;
		    id_str = '[model-id="' + id + '"]';
		    $(id_str).attr('flow-id', label);

		    //elemView.model.id = label;
		    // access renamed element
		    // $('[model-id="SLA"]').find($('text'))
		    // change value
		    // $('[model-id="SLA"]').find($('text')).html('new SLA')

		    flow_str = JSON.stringify(graph.toJSON());
		    flow_str = flow_str.replace(/\"/g, "\\\"");
		    search_str = '|makeresults| eval id=\"' + panel_id + '\"|eval _key=id|eval defs=\"' + flow_str + '\"|outputlookup flowchart_kv';
		    //update.settings.set('search', search_str);
		    update.set({search:  search_str});
		    update.startSearch();
	            update.on("search:done", function(state, job) {
			;
		    });
    	        }
	    );
         
            // Canvas from which you take shapes
 
            stencilGraph = new jointjs.dia.Graph;
            stencilPaper = new jointjs.dia.Paper({
                el: this.el.getElementsByClassName('splunk-flowchart-stencil'),
                height: 55,
	        width: '100%',
                model: stencilGraph,
                interactive: false
            });

            var r1 = new jointjs.shapes.flowchart.Rectangle({
                position: {
                    x: 30,
                    y: 19
                }
            });

            var r2 = new jointjs.shapes.flowchart.Diamond({
                position: {
                    x: 160,
                    y: 17
                }
            });

            var r3 = new jointjs.shapes.flowchart.Circle({
                position: {
                    x: 250,
                    y: 55
                }
            });

            stencilGraph.addCells([r1, r2, r3]);
	    stencilPaper.scale(0.5);

            stencilPaper.on('cell:pointerdown', function(cellView, e, x, y) {
                $('body').append('<div id="flyPaper" style="position:fixed;z-index:100;opacity:.7;pointer-event:none;"></div>');
                var flyGraph = new jointjs.dia.Graph,
                    flyPaper = new jointjs.dia.Paper({
                    el: $('#flyPaper'),
                    model: flyGraph,
                    interactive: false
                }),

                flyShape = cellView.model.clone(),
                    pos = cellView.model.position(),
                    offset = {
                        x: x - pos.x,
                        y: y - pos.y
                };

                flyShape.position(0, 0);

                flyGraph.addCell(flyShape);

                $("#flyPaper").offset({
                    left: e.pageX - offset.x,
                    top: e.pageY - offset.y
                });

                $('body').on('mousemove.fly', function(e) {
                    $("#flyPaper").offset({
                        left: e.pageX - offset.x,
                        top: e.pageY - offset.y
                    });
                });

                $('body').on('mouseup.fly', function(e) {
                    var x = e.pageX,
                    y = e.pageY,
                    target = paper.$el.offset();

                    // Dropped over paper ?
                    if (x > target.left && x < target.left + paper.$el.width() && y > target.top && y < target.top + paper.$el.height()) {
                        var s = flyShape.clone();
                        s.position(x - target.left - offset.x, y - target.top - offset.y);
                        graph.addCell(s);
                    }

                    $('body').off('mousemove.fly').off('mouseup.fly');

                    flyShape.remove();
                    $('#flyPaper').remove();
                });
            });
        },

        getInitialDataParams: function() {
            return ({
                outputMode: SplunkVisualizationBase.ROW_MAJOR_OUTPUT_MODE,
                count: 10000
            });
        },
  
        updateView: function(data, config) {
            //edit = document.getElementsByClassName('dashboard edit-mode');
	    //stencil = document.getElementsByClassName('splunk-flowchart-stencil')[0];
            //if (edit.length==0) {
                //edit_mode = 1;
		//stencil.style.display = 'none';
            //} else {
                //edit_mode = 0;
		//stencil.style.display = 'block';
            //}

            if (!data || !data.meta) {
                return;
            }

            if (data.meta.done) {
	        search_str = '|inputlookup flowchart_kv|eval k=_key|where k="' + panel_id + '"|table defs';
	        update.set({search:  search_str});
	        results = search.data('results');
	        results.on("data", () => {
     		    if (results.hasData()) {
		        graph_str = results.data().rows[0][1];
		        graph.fromJSON(JSON.parse(graph_str));
            	    }
 	        });
debugger;
            }
        }
    });
});
